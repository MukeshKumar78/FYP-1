apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: society
  name: society
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: society
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/docker-default: "true"
        io.kompose.service: society
    spec:
      containers:
        - env:
            - name: EUREKA_HOST
              valueFrom:
                secretKeyRef:
                  key: eureka_host
                  name: campusme-secrets
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  key: jwt_secret
                  name: campusme-secrets
            - name: POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  key: postgres_host
                  name: campusme-secrets
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres_password
                  name: campusme-secrets
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  key: redis_host
                  name: campusme-secrets
            - name: REDIS_PORT
              valueFrom:
                secretKeyRef:
                  key: redis_port
                  name: campusme-secrets
            - name: STATIC_FILES_LOCATION
              valueFrom:
                secretKeyRef:
                  key: static_files_location
                  name: campusme-secrets
          image: campusmecr.azurecr.io/society
          imagePullPolicy: IfNotPresent
          name: society
          resources: {}
          volumeMounts:
            - mountPath: /public
              name: public
      restartPolicy: Always
      volumes:
        - name: public
          persistentVolumeClaim:
            claimName: public
status: {}
